<div class="notebook">

<div class="nb-cell markdown">

## Logicmoo Utils Examples

 from https://github.com/logicmoo/logicmoo_utils.git

 Install locally with

 ````prolog
 ?- pack_install('https://github.com/logicmoo/logicmoo_utils.git').
 ````

## Trace with your eyeballs instead of your fingers

````prolog

?- use_module(library(must_trace)).
yes.

?- rtrace(member(X,[1,2,3])).
   Call: (9) lists:member(_8730, [1, 2, 3])
   Unify: (9) lists:member(_8730, [1, 2, 3])
   Exit: (9) lists:member(1, [1, 2, 3])
X = 1 ;
   Redo: (9) lists:member(_8730, [1, 2, 3])
   Exit: (9) lists:member(2, [1, 2, 3])
X = 2 ;
   Redo: (9) lists:member(_8730, [1, 2, 3])
   Exit: (9) lists:member(3, [1, 2, 3])
X = 3.

?-  rtrace(member(X,[1,2,3])),member(Y,[4,5]).
   Call: (10) lists:member(_10508, [1, 2, 3])
   Unify: (10) lists:member(_10508, [1, 2, 3])
   Exit: (10) lists:member(1, [1, 2, 3])
X = 1,
Y = 4 ;
X = 1,
Y = 5 ;
   Redo: (10) lists:member(_10508, [1, 2, 3])
   Exit: (10) lists:member(2, [1, 2, 3])
X = 2,
Y = 4 ;
X = 2,
Y = 5 ;
   Redo: (10) lists:member(_10508, [1, 2, 3])
   Exit: (10) lists:member(3, [1, 2, 3])
X = 3,
Y = 4 ;
X = 3,
Y = 5.
````

````prolog
?- rtrace((member(X,[1,2,3]),member(Y,[4,5]))).
   Call: (10) lists:member(_11854, [1, 2, 3])
   Unify: (10) lists:member(_11854, [1, 2, 3])
   Exit: (10) lists:member(1, [1, 2, 3])
   Call: (10) lists:member(_11872, [4, 5])
   Unify: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(4, [4, 5])
X = 1,
Y = 4 ;
   Redo: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(5, [4, 5])
X = 1,
Y = 5 ;
   Redo: (10) lists:member(_11854, [1, 2, 3])
   Exit: (10) lists:member(2, [1, 2, 3])
   Call: (10) lists:member(_11872, [4, 5])
   Unify: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(4, [4, 5])
X = 2,
Y = 4 ;
   Redo: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(5, [4, 5])
X = 2,
Y = 5 ;
   Redo: (10) lists:member(_11854, [1, 2, 3])
   Exit: (10) lists:member(3, [1, 2, 3])
   Call: (10) lists:member(_11872, [4, 5])
   Unify: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(4, [4, 5])
X = 3,
Y = 4 ;
   Redo: (10) lists:member(_11872, [4, 5])
   Exit: (10) lists:member(5, [4, 5])
X = 3,
Y = 5.
````
</div>

<div class="nb-cell markdown">
# Less Noisy debug

Wrap `quietly/1` over parts of your code you no longer need to stepped thru.
</div>

<div class="nb-cell query" name="q16">
trace,member(X,[1,2,3]),quietly((write('member was'=X),nl)),X=2,!.
</div>


<div class="nb-cell markdown">
# Mistrust your code


Wrap `must/1` over parts of your code you do not trust yet.
If your code fails.. it will rewind to your entry block (at the scope of this declaration) and invoke rtrace/1 .
If there are 50 steps to your code, it will save you from pushing `creep` 50 times.  
Instead it turns off the leash to allow you to trace with your eyeballs instead of your fingers


</div>

<div class="nb-cell query">
must(member(3,[4,5])).
</div>

<div class="nb-cell markdown">
# Check your code

Wrap `sanity/1` over parts of your code you want to turn on/off that is only usefull for slow debugging
</div>

<div class="nb-cell query">
sanity(sleep(2)).
</div>

<div class="nb-cell query">
sanity(1=2).
</div>

<div class="nb-cell markdown">
# Comment out your code

Wrap `nop/1` over parts of your code you do not want to quickly comment out yet not break syntax. 
 Defined as:

</div>
<div class="nb-cell program prolog" data-background="false">
:- meta_predicate nop(0).

nop(_).
</div>


<div class="nb-cell query">
nop(1=2).
</div>


</div>

